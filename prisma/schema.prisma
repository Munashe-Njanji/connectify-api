// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Add this to your `.env` file
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  isEmailVerified    Boolean   @default(false)
  emailVerifyToken   String?   @unique
  emailVerifyExpires DateTime?

  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  refreshToken        String?
  refreshTokenExpires DateTime?

  loginAttempts    Int       @default(0)
  lastLoginAttempt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isOnline    Boolean?
  avatar      String?
  headline    String?
  posts       Post[]
  connections User[]    @relation("UserConnections")
  connectedTo User[]    @relation("UserConnections")
  Comment     Comment[]
  Like        Like[]
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  content   String
  image     String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime  @default(now())
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}
